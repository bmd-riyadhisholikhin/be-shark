// Code generated by candi v1.6.4.

package repository

import (
	"context"
	"database/sql"
	"fmt"
	"time"
	"github.com/google/uuid"
	

	shareddomain "be-shark/pkg/shared/domain"

	"pkg.agungdp.dev/candi/candishared"
	"pkg.agungdp.dev/candi/tracer"
)

type contactRepoSQL struct {
	readDB, writeDB *sql.DB
	tx              *sql.Tx
}

// NewContactRepoSQL mongo repo constructor
func NewContactRepoSQL(readDB, writeDB *sql.DB, tx *sql.Tx) ContactRepository {
	return &contactRepoSQL{
		readDB, writeDB, tx,
	}
}

func (r *contactRepoSQL) FetchAll(ctx context.Context, filter *candishared.Filter) (data []shareddomain.Contact, err error) {
	trace, ctx := tracer.StartTraceWithContext(ctx, "ContactRepoSQL:FetchAll")
	defer func() { trace.SetError(err); trace.Finish() }()

	if filter.OrderBy == "" {
		filter.OrderBy = "modified_at"
	}
	
	query := fmt.Sprintf("SELECT id, field, created_at, modified_at FROM contacts ORDER BY %s %s LIMIT %d OFFSET %d",
		filter.OrderBy, filter.Sort, filter.Limit, filter.Offset)
	trace.Log("query", query)
	rows, err := r.readDB.Query(query)
	if err != nil {
		return data, err
	}
	defer rows.Close()
	for rows.Next() {
		var res shareddomain.Contact
		if err := rows.Scan(&res.ID, &res.Field, &res.CreatedAt, &res.ModifiedAt); err != nil {
			return nil, err
		}
		data = append(data, res)
	}
	return
}

func (r *contactRepoSQL) Count(ctx context.Context, filter *candishared.Filter) (count int) {
	trace, ctx := tracer.StartTraceWithContext(ctx, "ContactRepoSQL:Count")
	defer trace.Finish()

	r.readDB.QueryRow("SELECT COUNT(*) FROM contacts").Scan(&count)
	return
}

func (r *contactRepoSQL) Find(ctx context.Context, data *shareddomain.Contact) (err error) {
	trace, ctx := tracer.StartTraceWithContext(ctx, "ContactRepoSQL:Find")
	defer func() { trace.SetError(err); trace.Finish() }()

	return
}

func (r *contactRepoSQL) Save(ctx context.Context, data *shareddomain.Contact) (err error) {
	trace, ctx := tracer.StartTraceWithContext(ctx, "ContactRepoSQL:Save")
	defer func() { trace.SetError(err); trace.Finish() }()
	tracer.Log(ctx, "data", data)

	data.ModifiedAt = time.Now()
	if data.CreatedAt.IsZero() {
		data.CreatedAt = time.Now()
	}
	if data.ID == "" {
		data.ID = uuid.NewString()
	}
	
	return
}

func (r *contactRepoSQL) Delete(ctx context.Context, id string) (err error) {
	trace, ctx := tracer.StartTraceWithContext(ctx, "ContactRepoSQL:Save")
	defer func() { trace.SetError(err); trace.Finish() }()

	return
}
