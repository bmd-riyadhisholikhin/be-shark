// Code generated by candi v1.6.4.

package usecase

import (
	"context"

	shareddomain "be-shark/pkg/shared/domain"
	"be-shark/pkg/shared/repository"
	"be-shark/pkg/shared/usecase/common"

	"pkg.agungdp.dev/candi/candishared"
	"pkg.agungdp.dev/candi/codebase/factory/dependency"
	"pkg.agungdp.dev/candi/codebase/interfaces"
	"pkg.agungdp.dev/candi/tracer"
)

type accountUsecaseImpl struct {
	sharedUsecase common.Usecase
	cache         interfaces.Cache
	repoSQL   repository.RepoSQL
	
}

// NewAccountUsecase usecase impl constructor
func NewAccountUsecase(deps dependency.Dependency) (AccountUsecase, func(sharedUsecase common.Usecase)) {
	uc := &accountUsecaseImpl{
		cache: deps.GetRedisPool().Cache(),
		repoSQL:   repository.GetSharedRepoSQL(),
		
	}
	return uc, func(sharedUsecase common.Usecase) {
		uc.sharedUsecase = sharedUsecase
	}
}

func (uc *accountUsecaseImpl) GetAllAccount(ctx context.Context, filter candishared.Filter) (data []shareddomain.Account, meta candishared.Meta, err error) {
	trace, ctx := tracer.StartTraceWithContext(ctx, "AccountUsecase:GetAllAccount")
	defer trace.Finish()

	data, err = uc.repoSQL.AccountRepo().FetchAll(ctx, &filter)
	if err != nil {
		return data, meta, err
	}
	count := uc.repoSQL.AccountRepo().Count(ctx, &filter)
	meta = candishared.NewMeta(filter.Page, filter.Limit, count)

	return
}

func (uc *accountUsecaseImpl) GetDetailAccount(ctx context.Context, id string) (data shareddomain.Account, err error) {
	trace, ctx := tracer.StartTraceWithContext(ctx, "AccountUsecase:GetDetailAccount")
	defer trace.Finish()

	data.ID = id
	err = uc.repoSQL.AccountRepo().Find(ctx, &data)
	return
}

func (uc *accountUsecaseImpl) CreateAccount(ctx context.Context, data *shareddomain.Account) (err error) {
	trace, ctx := tracer.StartTraceWithContext(ctx, "AccountUsecase:CreateAccount")
	defer trace.Finish()

	return uc.repoSQL.AccountRepo().Save(ctx, data)
}

func (uc *accountUsecaseImpl) UpdateAccount(ctx context.Context, id string, data *shareddomain.Account) (err error) {
	trace, ctx := tracer.StartTraceWithContext(ctx, "AccountUsecase:UpdateAccount")
	defer trace.Finish()

	var existing shareddomain.Account
	existing.ID = id
	if err := uc.repoSQL.AccountRepo().Find(ctx, &existing); err != nil {
		return err
	}
	data.ID = existing.ID
	data.CreatedAt = existing.CreatedAt
	return  uc.repoSQL.AccountRepo().Save(ctx, data)
}

func (uc *accountUsecaseImpl) DeleteAccount(ctx context.Context, id string) (err error) {
	trace, ctx := tracer.StartTraceWithContext(ctx, "AccountUsecase:DeleteAccount")
	defer trace.Finish()

	return uc.repoSQL.AccountRepo().Delete(ctx, id)
}
