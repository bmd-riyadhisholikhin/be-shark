// Code generated by candi v1.6.4.

package resthandler

import (
	"net/http"

	"github.com/labstack/echo"

	shareddomain "be-shark/pkg/shared/domain"
	"be-shark/pkg/shared/usecase"

	"pkg.agungdp.dev/candi/candihelper"
	"pkg.agungdp.dev/candi/candishared"
	"pkg.agungdp.dev/candi/codebase/interfaces"
	"pkg.agungdp.dev/candi/tracer"
	"pkg.agungdp.dev/candi/wrapper"
)

// RestHandler handler
type RestHandler struct {
	mw        interfaces.Middleware
	uc        usecase.Usecase
	validator interfaces.Validator
}

// NewRestHandler create new rest handler
func NewRestHandler(mw interfaces.Middleware, uc usecase.Usecase, validator interfaces.Validator) *RestHandler {
	return &RestHandler{
		mw: mw, uc: uc, validator: validator,
	}
}

// Mount handler with root "/"
// handling version in here
func (h *RestHandler) Mount(root *echo.Group) {
	v1Root := root.Group(candihelper.V1)

	account := v1Root.Group("/account", echo.WrapMiddleware(h.mw.HTTPBearerAuth))
	account.GET("", h.getAllAccount, echo.WrapMiddleware(h.mw.HTTPPermissionACL("resource.public")))
	account.GET("/:id", h.getDetailAccountByID, echo.WrapMiddleware(h.mw.HTTPPermissionACL("resource.public")))
	account.POST("", h.createAccount, echo.WrapMiddleware(h.mw.HTTPPermissionACL("resource.public")))
	account.PUT("/:id", h.updateAccount, echo.WrapMiddleware(h.mw.HTTPPermissionACL("resource.public")))
	account.DELETE("/:id", h.deleteAccount, echo.WrapMiddleware(h.mw.HTTPPermissionACL("resource.public")))
}

func (h *RestHandler) getAllAccount(c echo.Context) error {
	trace, ctx := tracer.StartTraceWithContext(c.Request().Context(), "AccountDeliveryREST:GetAllAccount")
	defer trace.Finish()

	tokenClaim := candishared.ParseTokenClaimFromContext(ctx) // must using HTTPBearerAuth in middleware for this handler

	var filter candishared.Filter
	if err := candihelper.ParseFromQueryParam(c.Request().URL.Query(), &filter); err != nil {
		return wrapper.NewHTTPResponse(http.StatusBadRequest, err.Error()).JSON(c.Response())
	}

	data, meta, err := h.uc.Account().GetAllAccount(ctx, filter)
	if err != nil {
		return wrapper.NewHTTPResponse(http.StatusOK, err.Error()).JSON(c.Response())
	}

	message := "Success, with your user id (" + tokenClaim.Subject + ") and role (" + tokenClaim.Role + ")"
	return wrapper.NewHTTPResponse(http.StatusOK, message, meta, data).JSON(c.Response())
}

func (h *RestHandler) getDetailAccountByID(c echo.Context) error {
	trace, ctx := tracer.StartTraceWithContext(c.Request().Context(), "AccountDeliveryREST:GetDetailAccountByID")
	defer trace.Finish()

	data, err := h.uc.Account().GetDetailAccount(ctx, c.Param("id"))
	if err != nil {
		return wrapper.NewHTTPResponse(http.StatusBadRequest, err.Error()).JSON(c.Response())
	}

	return wrapper.NewHTTPResponse(http.StatusOK, "Success", data).JSON(c.Response())
}

func (h *RestHandler) createAccount(c echo.Context) error {
	trace, ctx := tracer.StartTraceWithContext(c.Request().Context(), "AccountDeliveryREST:CreateAccount")
	defer trace.Finish()

	var payload shareddomain.Account
	if err := c.Bind(&payload); err != nil {
		return wrapper.NewHTTPResponse(http.StatusOK, err.Error()).JSON(c.Response())
	}

	err := h.uc.Account().CreateAccount(ctx, &payload)
	if err != nil {
		return wrapper.NewHTTPResponse(http.StatusBadRequest, err.Error()).JSON(c.Response())
	}

	return wrapper.NewHTTPResponse(http.StatusOK, "Success").JSON(c.Response())
}

func (h *RestHandler) updateAccount(c echo.Context) error {
	trace, ctx := tracer.StartTraceWithContext(c.Request().Context(), "AccountDeliveryREST:UpdateAccount")
	defer trace.Finish()

	var payload shareddomain.Account
	if err := c.Bind(&payload); err != nil {
		return wrapper.NewHTTPResponse(http.StatusOK, err.Error()).JSON(c.Response())
	}

	err := h.uc.Account().UpdateAccount(ctx, c.Param("id"), &payload)
	if err != nil {
		return wrapper.NewHTTPResponse(http.StatusBadRequest, err.Error()).JSON(c.Response())
	}

	return wrapper.NewHTTPResponse(http.StatusOK, "Success").JSON(c.Response())
}

func (h *RestHandler) deleteAccount(c echo.Context) error {
	trace, ctx := tracer.StartTraceWithContext(c.Request().Context(), "AccountDeliveryREST:DeleteAccount")
	defer trace.Finish()

	if err := h.uc.Account().DeleteAccount(ctx, c.Param("id")); err != nil {
		return wrapper.NewHTTPResponse(http.StatusBadRequest, err.Error()).JSON(c.Response())
	}

	return wrapper.NewHTTPResponse(http.StatusOK, "Success").JSON(c.Response())
}
